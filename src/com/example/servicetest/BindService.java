package com.example.servicetest;

import android.app.Service;
import android.content.Intent;
import android.os.Binder;
import android.os.IBinder;

public class BindService extends Service {
	private int count;
	private boolean quit;
	//定义onBinder方法所返回的对象
	private MyBinder binder=new MyBinder();
	//通过继承Binder来实现IBinder类
	public class MyBinder extends Binder{
		//通过继承Binder类来实现一个IBinder对象，这个MyBinder类是
		//Service的内部类，这对于绑定本地Service并与之通信
		public int getCount(){
			//获取Service的运行状态：count
			return count;
		}
	}
	//必须实现的方法，绑定该Service时回调的该方法
	@Override
	public IBinder onBind(Intent arg0) {
		// TODO Auto-generated method stub
//		return null;
		System.out.println("Service is Binded");
		return binder;
		//这个是实现onBind()方法，该方法返回了一个可访问该Service状态数据（count值）
		//的IBinder对象，该对象将被传给Service的访问者
	}
	//Service被创建时回调该方法
	public void onCreate()
	{
		super.onCreate();
		System.out.println("Service is create");
		//启动一条线程，动态的修改count状态值
		new Thread()
		{
			@Override
			public void run()
			{
				while(!quit)
				{
					try{
						Thread.sleep(1000);
					}
					catch(InterruptedException e){
						
					}
					count++;
				}
			}			
		}.start();
	}
	//Service 被断开连接时回调该方法
	@Override
	public boolean onUnbind(Intent intent){
		System.out.println("Service is Unbinded");
		return true;
	}
	//Service 被关闭时回调该方法
	@Override
	public void onDestroy(){
		super.onDestroy();
		this.quit=true;
		System.out.println("Service is Destroyed");
	}

}
